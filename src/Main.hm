module Main where

import Prelude (Either(..), IO, Unit, bind, concat, discard, error, foldl, pure, range, return, seqio, spawn, try, unit, ($), (+), (==), (>>=), println, showAny)
import Network.UDP (Option(..), Socket, close, openWith, recv, recvTimeout, sendTo)
import Network.UDP as U
import Test.QuickCheck (TestGroup(..), TestResult, quickCheck1, runTest)
import Data.Timeout (Timeout(..))
import Data.Binary.Base64 (encode, decode)

serProcess :: Integer -> IO ()
serProcess port = do
  sock <- openWith port [Active false]
  recvLoop sock
  close sock
 where
   recvLoop sock = do
     (ip, pn, b) <- recv sock 10
     let v = decode b == <<"message">>
     if v
        then  sendTo sock ip pn <<"ok">>
        else  sendTo sock ip pn <<"failed">>
     recvLoop sock

start :: IO ()
start = do
  seqio [(spawn $ serProcess p) >>= \_ -> return p  | p <- [8000 .. 8030]]
  return ()

client :: IO Boolean
client = do
  sock <- openWith 0 [Active false]
  vs <- seqio [seqio [action sock (encode <<"message">>) p | p <- [8000 .. 8030] ] | x <- [1..1]]
  let vs' = foldl (+) 0 $ concat vs
  close sock
  return $ vs' == 62

action :: Socket -> Binary -> Integer -> IO Integer
action sock b port = do
  U.send sock "localhost" port b
  v <- try (recvTimeout sock 10 (Timeout 2000))
  case v of
    Left _ -> return $ error "timeout happened"
    Right (_,_,x) -> case x of
                       <<"ok">> -> return 2
                       _     -> return $ error "some strange happened"

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck1 "UDP: create 30 process to receive UDP connect" (start >>= \_ -> client)
           ]

main :: IO ()
main = runTest $ TxG "test" [test]


