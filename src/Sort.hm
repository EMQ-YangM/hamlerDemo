module Sort where

import Prelude

quickSort :: forall a. Ord a => [a] -> [a]
quickSort [] = []
quickSort [x|xs] = quickSort [v | v <- xs, v <x] ++ [x] ++ quickSort [v | v <-xs , v >= x]

quickSort1 :: forall a. Ord a => [a] -> [a]
quickSort1 [] = []
quickSort1 [x|xs] = let (ll,lr) = foldl (\(l,r) a -> if a >= x then (l, [a|r]) else ([a|l], r)) ([],[]) xs
                    in quickSort1 ll ++ [x] ++ quickSort1 lr

merge :: forall a. Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge [x|xs] [y|ys] = if x <= y
                      then  [x |merge xs [y|ys]]
                      else  [y |merge [x|xs] ys]

mergesort :: forall a. Ord a => [a] -> [a]
mergesort [] = []
mergesort [x] = [x]
mergesort xs = let (as, bs) = splitAt (length xs / 2) xs
               in merge (mergesort as) (mergesort bs)
